
drivers V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a36  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000aaa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  00800060  00800060  00000aaa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aaa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000adc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000212d  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f40  00000000  00000000  00002f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013fa  00000000  00000000  00003e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000970  00000000  00000000  00005268  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000017ad  00000000  00000000  00005bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001fc5  00000000  00000000  00007385  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  0000934a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3a 02 	jmp	0x474	; 0x474 <__vector_1>
   8:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__vector_2>
   c:	0c 94 8c 02 	jmp	0x518	; 0x518 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__vector_7>
  20:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__vector_8>
  24:	0c 94 ef 03 	jmp	0x7de	; 0x7de <__vector_9>
  28:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__vector_10>
  2c:	0c 94 20 03 	jmp	0x640	; 0x640 <__vector_11>
  30:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__vector_12>
  34:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__vector_13>
  38:	0c 94 ce 04 	jmp	0x99c	; 0x99c <__vector_14>
  3c:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__vector_15>
  40:	0c 94 a0 00 	jmp	0x140	; 0x140 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e3       	ldi	r30, 0x36	; 54
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 38       	cpi	r26, 0x85	; 133
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 19 05 	jmp	0xa32	; 0xa32 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "HAL/LCD/LCD_interface.h"
#include "HAL/LED/LED_interface.h"
#include "MCAL/DIO/DIO_interface.h"

int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	64 97       	sbiw	r28, 0x14	; 20
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	USART_voidInit(TRANSMIT_RECIEVE , ASYNCRONOUS , EIGHT_BITS , DISAPLED , ONE_STOP_BIT , 2400);	
  a6:	0f 2e       	mov	r0, r31
  a8:	f0 e6       	ldi	r31, 0x60	; 96
  aa:	ef 2e       	mov	r14, r31
  ac:	f9 e0       	ldi	r31, 0x09	; 9
  ae:	ff 2e       	mov	r15, r31
  b0:	f0 2d       	mov	r31, r0
  b2:	00 e0       	ldi	r16, 0x00	; 0
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	43 e0       	ldi	r20, 0x03	; 3
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	83 e0       	ldi	r24, 0x03	; 3
  bc:	0e 94 23 04 	call	0x846	; 0x846 <USART_voidInit>
	SPI_voidInit(MASTER_MODE , MSB , LEADING_IS_RISING , LEADING_IS_SAMPLE , SPI_PRESCALAR_16);
  c0:	01 e0       	ldi	r16, 0x01	; 1
  c2:	20 e0       	ldi	r18, 0x00	; 0
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	0e 94 b5 02 	call	0x56a	; 0x56a <SPI_voidInit>
	
	u8 string[20];
	u8 index = 0;
  ce:	10 e0       	ldi	r17, 0x00	; 0
    while (1) 
    {
		u8 data = USART_u8RecieveData();
  d0:	0e 94 77 04 	call	0x8ee	; 0x8ee <USART_u8RecieveData>
		// if backspace
		if (data == 0x08)
  d4:	88 30       	cpi	r24, 0x08	; 8
  d6:	11 f4       	brne	.+4      	; 0xdc <main+0x4a>
			index--;
  d8:	11 50       	subi	r17, 0x01	; 1
  da:	0a c0       	rjmp	.+20     	; 0xf0 <main+0x5e>
		// add data if it is not enter
		else if (data != '\r')
  dc:	8d 30       	cpi	r24, 0x0D	; 13
  de:	41 f0       	breq	.+16     	; 0xf0 <main+0x5e>
			string[index++] = data;
  e0:	e1 e0       	ldi	r30, 0x01	; 1
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	ec 0f       	add	r30, r28
  e6:	fd 1f       	adc	r31, r29
  e8:	e1 0f       	add	r30, r17
  ea:	f1 1d       	adc	r31, r1
  ec:	80 83       	st	Z, r24
  ee:	1f 5f       	subi	r17, 0xFF	; 255
		if (data == '\r' && string[0] != NULL)
  f0:	8d 30       	cpi	r24, 0x0D	; 13
  f2:	71 f7       	brne	.-36     	; 0xd0 <main+0x3e>
  f4:	89 81       	ldd	r24, Y+1	; 0x01
  f6:	88 23       	and	r24, r24
  f8:	59 f3       	breq	.-42     	; 0xd0 <main+0x3e>
		{
			string[index] = NULL;
  fa:	ce 01       	movw	r24, r28
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	7c 01       	movw	r14, r24
 100:	fc 01       	movw	r30, r24
 102:	e1 0f       	add	r30, r17
 104:	f1 1d       	adc	r31, r1
 106:	10 82       	st	Z, r1
			SPI_voidMasterTransmitString(string);
 108:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <SPI_voidMasterTransmitString>
			memset(string, NULL, sizeof(string));
 10c:	84 e1       	ldi	r24, 0x14	; 20
 10e:	f7 01       	movw	r30, r14
 110:	11 92       	st	Z+, r1
 112:	8a 95       	dec	r24
 114:	e9 f7       	brne	.-6      	; 0x110 <main+0x7e>
			index = 0;
 116:	10 e0       	ldi	r17, 0x00	; 0
 118:	db cf       	rjmp	.-74     	; 0xd0 <main+0x3e>

0000011a <ADC_voidStartConversion>:
	//enable ADC interrupt
	SET_BIT(ADCSRA_REG , 3);
	// enable GIE
	SET_BIT(SREG_REG,7);
	ADC_callback = callback;
	ADC_voidStartConversion(channel);
 11a:	cf 93       	push	r28
 11c:	c8 2f       	mov	r28, r24
 11e:	40 e0       	ldi	r20, 0x00	; 0
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	0e 94 db 00 	call	0x1b6	; 0x1b6 <DIO_voidSetPinDirection>
 126:	87 b1       	in	r24, 0x07	; 7
 128:	80 7e       	andi	r24, 0xE0	; 224
 12a:	87 b9       	out	0x07, r24	; 7
 12c:	87 b1       	in	r24, 0x07	; 7
 12e:	8c 2b       	or	r24, r28
 130:	87 b9       	out	0x07, r24	; 7
 132:	86 b1       	in	r24, 0x06	; 6
 134:	80 64       	ori	r24, 0x40	; 64
 136:	86 b9       	out	0x06, r24	; 6
 138:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__DATA_REGION_ORIGIN__>
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <__vector_16>:
};

void ADC_ISR_VECTOR(void)
{
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	2f 93       	push	r18
 14c:	3f 93       	push	r19
 14e:	4f 93       	push	r20
 150:	5f 93       	push	r21
 152:	6f 93       	push	r22
 154:	7f 93       	push	r23
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	af 93       	push	r26
 15c:	bf 93       	push	r27
 15e:	ef 93       	push	r30
 160:	ff 93       	push	r31
	if (ADC_callback != 0)
 162:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <ADC_callback>
 166:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <ADC_callback+0x1>
 16a:	30 97       	sbiw	r30, 0x00	; 0
 16c:	71 f0       	breq	.+28     	; 0x18a <__vector_16+0x4a>
	{
		ADC_callback(ADCHL_REG);
 16e:	84 b1       	in	r24, 0x04	; 4
 170:	95 b1       	in	r25, 0x05	; 5
 172:	09 95       	icall
		SET_BIT(ADCSRA_REG , 4);
 174:	86 b1       	in	r24, 0x06	; 6
 176:	80 61       	ori	r24, 0x10	; 16
 178:	86 b9       	out	0x06, r24	; 6
		if (adcMode == ADC_MODE_COUNTINOUS_CONVERSION)
 17a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <adcMode>
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	21 f4       	brne	.+8      	; 0x18a <__vector_16+0x4a>
		{
			ADC_voidStartConversion(adcChannel);
 182:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 186:	0e 94 8d 00 	call	0x11a	; 0x11a <ADC_voidStartConversion>
		}
	}
 18a:	ff 91       	pop	r31
 18c:	ef 91       	pop	r30
 18e:	bf 91       	pop	r27
 190:	af 91       	pop	r26
 192:	9f 91       	pop	r25
 194:	8f 91       	pop	r24
 196:	7f 91       	pop	r23
 198:	6f 91       	pop	r22
 19a:	5f 91       	pop	r21
 19c:	4f 91       	pop	r20
 19e:	3f 91       	pop	r19
 1a0:	2f 91       	pop	r18
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <CLOCK_u32GetSystemClock>:
	__asm__ volatile("NOP");
}

u32 CLOCK_u32GetSystemClock(void){
	return CLOCK_SYSTEM_FREQUENCY;
 1ac:	60 e0       	ldi	r22, 0x00	; 0
 1ae:	72 e1       	ldi	r23, 0x12	; 18
 1b0:	8a e7       	ldi	r24, 0x7A	; 122
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	08 95       	ret

000001b6 <DIO_voidSetPinDirection>:
			DDRD_REG=0x00;
		}
		else if (Copy_u8PortDirection == INPUT_PULL_UP)
		{
			PORTD_REG=0xFF;
			DDRD_REG=0x00;
 1b6:	61 30       	cpi	r22, 0x01	; 1
 1b8:	e1 f1       	breq	.+120    	; 0x232 <DIO_voidSetPinDirection+0x7c>
 1ba:	38 f0       	brcs	.+14     	; 0x1ca <DIO_voidSetPinDirection+0x14>
 1bc:	62 30       	cpi	r22, 0x02	; 2
 1be:	09 f4       	brne	.+2      	; 0x1c2 <DIO_voidSetPinDirection+0xc>
 1c0:	6c c0       	rjmp	.+216    	; 0x29a <DIO_voidSetPinDirection+0xe4>
 1c2:	63 30       	cpi	r22, 0x03	; 3
 1c4:	09 f4       	brne	.+2      	; 0x1c8 <DIO_voidSetPinDirection+0x12>
 1c6:	9d c0       	rjmp	.+314    	; 0x302 <DIO_voidSetPinDirection+0x14c>
 1c8:	08 95       	ret
 1ca:	41 30       	cpi	r20, 0x01	; 1
 1cc:	69 f4       	brne	.+26     	; 0x1e8 <DIO_voidSetPinDirection+0x32>
 1ce:	4a b3       	in	r20, 0x1a	; 26
 1d0:	21 e0       	ldi	r18, 0x01	; 1
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	b9 01       	movw	r22, r18
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_voidSetPinDirection+0x26>
 1d8:	66 0f       	add	r22, r22
 1da:	77 1f       	adc	r23, r23
 1dc:	8a 95       	dec	r24
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_voidSetPinDirection+0x22>
 1e0:	cb 01       	movw	r24, r22
 1e2:	84 2b       	or	r24, r20
 1e4:	8a bb       	out	0x1a, r24	; 26
 1e6:	08 95       	ret
 1e8:	41 11       	cpse	r20, r1
 1ea:	0e c0       	rjmp	.+28     	; 0x208 <DIO_voidSetPinDirection+0x52>
 1ec:	4a b3       	in	r20, 0x1a	; 26
 1ee:	21 e0       	ldi	r18, 0x01	; 1
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	b9 01       	movw	r22, r18
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_voidSetPinDirection+0x44>
 1f6:	66 0f       	add	r22, r22
 1f8:	77 1f       	adc	r23, r23
 1fa:	8a 95       	dec	r24
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_voidSetPinDirection+0x40>
 1fe:	cb 01       	movw	r24, r22
 200:	80 95       	com	r24
 202:	84 23       	and	r24, r20
 204:	8a bb       	out	0x1a, r24	; 26
 206:	08 95       	ret
 208:	42 30       	cpi	r20, 0x02	; 2
 20a:	09 f0       	breq	.+2      	; 0x20e <DIO_voidSetPinDirection+0x58>
 20c:	ac c0       	rjmp	.+344    	; 0x366 <DIO_voidSetPinDirection+0x1b0>
 20e:	4b b3       	in	r20, 0x1b	; 27
 210:	21 e0       	ldi	r18, 0x01	; 1
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	b9 01       	movw	r22, r18
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_voidSetPinDirection+0x66>
 218:	66 0f       	add	r22, r22
 21a:	77 1f       	adc	r23, r23
 21c:	8a 95       	dec	r24
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_voidSetPinDirection+0x62>
 220:	cb 01       	movw	r24, r22
 222:	94 2f       	mov	r25, r20
 224:	98 2b       	or	r25, r24
 226:	9b bb       	out	0x1b, r25	; 27
 228:	9a b3       	in	r25, 0x1a	; 26
 22a:	80 95       	com	r24
 22c:	89 23       	and	r24, r25
 22e:	8a bb       	out	0x1a, r24	; 26
 230:	08 95       	ret
 232:	41 30       	cpi	r20, 0x01	; 1
 234:	69 f4       	brne	.+26     	; 0x250 <DIO_voidSetPinDirection+0x9a>
 236:	47 b3       	in	r20, 0x17	; 23
 238:	21 e0       	ldi	r18, 0x01	; 1
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	b9 01       	movw	r22, r18
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_voidSetPinDirection+0x8e>
 240:	66 0f       	add	r22, r22
 242:	77 1f       	adc	r23, r23
 244:	8a 95       	dec	r24
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_voidSetPinDirection+0x8a>
 248:	cb 01       	movw	r24, r22
 24a:	84 2b       	or	r24, r20
 24c:	87 bb       	out	0x17, r24	; 23
 24e:	08 95       	ret
 250:	41 11       	cpse	r20, r1
 252:	0e c0       	rjmp	.+28     	; 0x270 <DIO_voidSetPinDirection+0xba>
 254:	47 b3       	in	r20, 0x17	; 23
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	b9 01       	movw	r22, r18
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_voidSetPinDirection+0xac>
 25e:	66 0f       	add	r22, r22
 260:	77 1f       	adc	r23, r23
 262:	8a 95       	dec	r24
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_voidSetPinDirection+0xa8>
 266:	cb 01       	movw	r24, r22
 268:	80 95       	com	r24
 26a:	84 23       	and	r24, r20
 26c:	87 bb       	out	0x17, r24	; 23
 26e:	08 95       	ret
 270:	42 30       	cpi	r20, 0x02	; 2
 272:	09 f0       	breq	.+2      	; 0x276 <DIO_voidSetPinDirection+0xc0>
 274:	78 c0       	rjmp	.+240    	; 0x366 <DIO_voidSetPinDirection+0x1b0>
 276:	48 b3       	in	r20, 0x18	; 24
 278:	21 e0       	ldi	r18, 0x01	; 1
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	b9 01       	movw	r22, r18
 27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_voidSetPinDirection+0xce>
 280:	66 0f       	add	r22, r22
 282:	77 1f       	adc	r23, r23
 284:	8a 95       	dec	r24
 286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_voidSetPinDirection+0xca>
 288:	cb 01       	movw	r24, r22
 28a:	94 2f       	mov	r25, r20
 28c:	98 2b       	or	r25, r24
 28e:	98 bb       	out	0x18, r25	; 24
 290:	97 b3       	in	r25, 0x17	; 23
 292:	80 95       	com	r24
 294:	89 23       	and	r24, r25
 296:	87 bb       	out	0x17, r24	; 23
 298:	08 95       	ret
 29a:	41 30       	cpi	r20, 0x01	; 1
 29c:	69 f4       	brne	.+26     	; 0x2b8 <DIO_voidSetPinDirection+0x102>
 29e:	44 b3       	in	r20, 0x14	; 20
 2a0:	21 e0       	ldi	r18, 0x01	; 1
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	b9 01       	movw	r22, r18
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DIO_voidSetPinDirection+0xf6>
 2a8:	66 0f       	add	r22, r22
 2aa:	77 1f       	adc	r23, r23
 2ac:	8a 95       	dec	r24
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <DIO_voidSetPinDirection+0xf2>
 2b0:	cb 01       	movw	r24, r22
 2b2:	84 2b       	or	r24, r20
 2b4:	84 bb       	out	0x14, r24	; 20
 2b6:	08 95       	ret
 2b8:	41 11       	cpse	r20, r1
 2ba:	0e c0       	rjmp	.+28     	; 0x2d8 <DIO_voidSetPinDirection+0x122>
 2bc:	44 b3       	in	r20, 0x14	; 20
 2be:	21 e0       	ldi	r18, 0x01	; 1
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	b9 01       	movw	r22, r18
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_voidSetPinDirection+0x114>
 2c6:	66 0f       	add	r22, r22
 2c8:	77 1f       	adc	r23, r23
 2ca:	8a 95       	dec	r24
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_voidSetPinDirection+0x110>
 2ce:	cb 01       	movw	r24, r22
 2d0:	80 95       	com	r24
 2d2:	84 23       	and	r24, r20
 2d4:	84 bb       	out	0x14, r24	; 20
 2d6:	08 95       	ret
 2d8:	42 30       	cpi	r20, 0x02	; 2
 2da:	09 f0       	breq	.+2      	; 0x2de <DIO_voidSetPinDirection+0x128>
 2dc:	44 c0       	rjmp	.+136    	; 0x366 <DIO_voidSetPinDirection+0x1b0>
 2de:	45 b3       	in	r20, 0x15	; 21
 2e0:	21 e0       	ldi	r18, 0x01	; 1
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	b9 01       	movw	r22, r18
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_voidSetPinDirection+0x136>
 2e8:	66 0f       	add	r22, r22
 2ea:	77 1f       	adc	r23, r23
 2ec:	8a 95       	dec	r24
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_voidSetPinDirection+0x132>
 2f0:	cb 01       	movw	r24, r22
 2f2:	94 2f       	mov	r25, r20
 2f4:	98 2b       	or	r25, r24
 2f6:	95 bb       	out	0x15, r25	; 21
 2f8:	94 b3       	in	r25, 0x14	; 20
 2fa:	80 95       	com	r24
 2fc:	89 23       	and	r24, r25
 2fe:	84 bb       	out	0x14, r24	; 20
 300:	08 95       	ret
 302:	41 30       	cpi	r20, 0x01	; 1
 304:	69 f4       	brne	.+26     	; 0x320 <DIO_voidSetPinDirection+0x16a>
 306:	41 b3       	in	r20, 0x11	; 17
 308:	21 e0       	ldi	r18, 0x01	; 1
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	b9 01       	movw	r22, r18
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_voidSetPinDirection+0x15e>
 310:	66 0f       	add	r22, r22
 312:	77 1f       	adc	r23, r23
 314:	8a 95       	dec	r24
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_voidSetPinDirection+0x15a>
 318:	cb 01       	movw	r24, r22
 31a:	84 2b       	or	r24, r20
 31c:	81 bb       	out	0x11, r24	; 17
 31e:	08 95       	ret
 320:	41 11       	cpse	r20, r1
 322:	0e c0       	rjmp	.+28     	; 0x340 <DIO_voidSetPinDirection+0x18a>
 324:	41 b3       	in	r20, 0x11	; 17
 326:	21 e0       	ldi	r18, 0x01	; 1
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	b9 01       	movw	r22, r18
 32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_voidSetPinDirection+0x17c>
 32e:	66 0f       	add	r22, r22
 330:	77 1f       	adc	r23, r23
 332:	8a 95       	dec	r24
 334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_voidSetPinDirection+0x178>
 336:	cb 01       	movw	r24, r22
 338:	80 95       	com	r24
 33a:	84 23       	and	r24, r20
 33c:	81 bb       	out	0x11, r24	; 17
 33e:	08 95       	ret
 340:	42 30       	cpi	r20, 0x02	; 2
 342:	89 f4       	brne	.+34     	; 0x366 <DIO_voidSetPinDirection+0x1b0>
 344:	42 b3       	in	r20, 0x12	; 18
 346:	21 e0       	ldi	r18, 0x01	; 1
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	b9 01       	movw	r22, r18
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_voidSetPinDirection+0x19c>
 34e:	66 0f       	add	r22, r22
 350:	77 1f       	adc	r23, r23
 352:	8a 95       	dec	r24
 354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_voidSetPinDirection+0x198>
 356:	cb 01       	movw	r24, r22
 358:	94 2f       	mov	r25, r20
 35a:	98 2b       	or	r25, r24
 35c:	92 bb       	out	0x12, r25	; 18
 35e:	91 b3       	in	r25, 0x11	; 17
 360:	80 95       	com	r24
 362:	89 23       	and	r24, r25
 364:	81 bb       	out	0x11, r24	; 17
 366:	08 95       	ret

00000368 <DIO_voidSetPinValue>:

}

void DIO_voidSetPinValue (u8 Copy_u8PinNumber, DIO_PORT_t DIO_port, u8 Copy_u8Value)
{
	switch (DIO_port)
 368:	61 30       	cpi	r22, 0x01	; 1
 36a:	39 f1       	breq	.+78     	; 0x3ba <DIO_voidSetPinValue+0x52>
 36c:	38 f0       	brcs	.+14     	; 0x37c <DIO_voidSetPinValue+0x14>
 36e:	62 30       	cpi	r22, 0x02	; 2
 370:	09 f4       	brne	.+2      	; 0x374 <DIO_voidSetPinValue+0xc>
 372:	42 c0       	rjmp	.+132    	; 0x3f8 <DIO_voidSetPinValue+0x90>
 374:	63 30       	cpi	r22, 0x03	; 3
 376:	09 f4       	brne	.+2      	; 0x37a <DIO_voidSetPinValue+0x12>
 378:	5e c0       	rjmp	.+188    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 37a:	08 95       	ret
	{
		case PORTA:
			if( Copy_u8Value == HIGH)
 37c:	41 30       	cpi	r20, 0x01	; 1
 37e:	69 f4       	brne	.+26     	; 0x39a <DIO_voidSetPinValue+0x32>
			{
				SET_BIT(PORTA_REG , Copy_u8PinNumber);
 380:	4b b3       	in	r20, 0x1b	; 27
 382:	21 e0       	ldi	r18, 0x01	; 1
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	b9 01       	movw	r22, r18
 388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_voidSetPinValue+0x26>
 38a:	66 0f       	add	r22, r22
 38c:	77 1f       	adc	r23, r23
 38e:	8a 95       	dec	r24
 390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_voidSetPinValue+0x22>
 392:	cb 01       	movw	r24, r22
 394:	84 2b       	or	r24, r20
 396:	8b bb       	out	0x1b, r24	; 27
 398:	08 95       	ret
			}
			else if ( Copy_u8Value ==LOW)
 39a:	41 11       	cpse	r20, r1
 39c:	6a c0       	rjmp	.+212    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
			{
				CLR_BIT(PORTA_REG , Copy_u8PinNumber);
 39e:	4b b3       	in	r20, 0x1b	; 27
 3a0:	21 e0       	ldi	r18, 0x01	; 1
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	b9 01       	movw	r22, r18
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <DIO_voidSetPinValue+0x44>
 3a8:	66 0f       	add	r22, r22
 3aa:	77 1f       	adc	r23, r23
 3ac:	8a 95       	dec	r24
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <DIO_voidSetPinValue+0x40>
 3b0:	cb 01       	movw	r24, r22
 3b2:	80 95       	com	r24
 3b4:	84 23       	and	r24, r20
 3b6:	8b bb       	out	0x1b, r24	; 27
 3b8:	08 95       	ret
			}
			break;

		case PORTB:
			if(Copy_u8Value == HIGH)
 3ba:	41 30       	cpi	r20, 0x01	; 1
 3bc:	69 f4       	brne	.+26     	; 0x3d8 <DIO_voidSetPinValue+0x70>
			{
				SET_BIT(PORTB_REG , Copy_u8PinNumber);
 3be:	48 b3       	in	r20, 0x18	; 24
 3c0:	21 e0       	ldi	r18, 0x01	; 1
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	b9 01       	movw	r22, r18
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_voidSetPinValue+0x64>
 3c8:	66 0f       	add	r22, r22
 3ca:	77 1f       	adc	r23, r23
 3cc:	8a 95       	dec	r24
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_voidSetPinValue+0x60>
 3d0:	cb 01       	movw	r24, r22
 3d2:	84 2b       	or	r24, r20
 3d4:	88 bb       	out	0x18, r24	; 24
 3d6:	08 95       	ret
			}
			else if ( Copy_u8Value ==LOW)
 3d8:	41 11       	cpse	r20, r1
 3da:	4b c0       	rjmp	.+150    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
			{
				CLR_BIT(PORTB_REG , Copy_u8PinNumber);
 3dc:	48 b3       	in	r20, 0x18	; 24
 3de:	21 e0       	ldi	r18, 0x01	; 1
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	b9 01       	movw	r22, r18
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_voidSetPinValue+0x82>
 3e6:	66 0f       	add	r22, r22
 3e8:	77 1f       	adc	r23, r23
 3ea:	8a 95       	dec	r24
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_voidSetPinValue+0x7e>
 3ee:	cb 01       	movw	r24, r22
 3f0:	80 95       	com	r24
 3f2:	84 23       	and	r24, r20
 3f4:	88 bb       	out	0x18, r24	; 24
 3f6:	08 95       	ret
			}
			break;

		case PORTC:

			if( Copy_u8Value == HIGH)
 3f8:	41 30       	cpi	r20, 0x01	; 1
 3fa:	69 f4       	brne	.+26     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
			{
				SET_BIT(PORTC_REG , Copy_u8PinNumber);
 3fc:	45 b3       	in	r20, 0x15	; 21
 3fe:	21 e0       	ldi	r18, 0x01	; 1
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	b9 01       	movw	r22, r18
 404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 406:	66 0f       	add	r22, r22
 408:	77 1f       	adc	r23, r23
 40a:	8a 95       	dec	r24
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40e:	cb 01       	movw	r24, r22
 410:	84 2b       	or	r24, r20
 412:	85 bb       	out	0x15, r24	; 21
 414:	08 95       	ret
			}
			else if ( Copy_u8Value ==LOW)
 416:	41 11       	cpse	r20, r1
 418:	2c c0       	rjmp	.+88     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
			{
				CLR_BIT(PORTC_REG , Copy_u8PinNumber);
 41a:	45 b3       	in	r20, 0x15	; 21
 41c:	21 e0       	ldi	r18, 0x01	; 1
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	b9 01       	movw	r22, r18
 422:	02 c0       	rjmp	.+4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 424:	66 0f       	add	r22, r22
 426:	77 1f       	adc	r23, r23
 428:	8a 95       	dec	r24
 42a:	e2 f7       	brpl	.-8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 42c:	cb 01       	movw	r24, r22
 42e:	80 95       	com	r24
 430:	84 23       	and	r24, r20
 432:	85 bb       	out	0x15, r24	; 21
 434:	08 95       	ret
			}
			break;

		case PORTD:

			if( Copy_u8Value == HIGH)
 436:	41 30       	cpi	r20, 0x01	; 1
 438:	69 f4       	brne	.+26     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
			{
				SET_BIT(PORTD_REG , Copy_u8PinNumber);
 43a:	42 b3       	in	r20, 0x12	; 18
 43c:	21 e0       	ldi	r18, 0x01	; 1
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	b9 01       	movw	r22, r18
 442:	02 c0       	rjmp	.+4      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 444:	66 0f       	add	r22, r22
 446:	77 1f       	adc	r23, r23
 448:	8a 95       	dec	r24
 44a:	e2 f7       	brpl	.-8      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 44c:	cb 01       	movw	r24, r22
 44e:	84 2b       	or	r24, r20
 450:	82 bb       	out	0x12, r24	; 18
 452:	08 95       	ret
			}
			else if ( Copy_u8Value ==LOW)
 454:	41 11       	cpse	r20, r1
 456:	0d c0       	rjmp	.+26     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
			{
				CLR_BIT(PORTD_REG , Copy_u8PinNumber);
 458:	42 b3       	in	r20, 0x12	; 18
 45a:	21 e0       	ldi	r18, 0x01	; 1
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	b9 01       	movw	r22, r18
 460:	02 c0       	rjmp	.+4      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 462:	66 0f       	add	r22, r22
 464:	77 1f       	adc	r23, r23
 466:	8a 95       	dec	r24
 468:	e2 f7       	brpl	.-8      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 46a:	cb 01       	movw	r24, r22
 46c:	80 95       	com	r24
 46e:	84 23       	and	r24, r20
 470:	82 bb       	out	0x12, r24	; 18
 472:	08 95       	ret

00000474 <__vector_1>:
	if(interruptPin > INT2)
	return;
	EXTI_voidCallBacks[interruptPin] = CallBack;
}

void EXTI_VECTOR_ISR_EXTI0(void){
 474:	1f 92       	push	r1
 476:	0f 92       	push	r0
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	0f 92       	push	r0
 47c:	11 24       	eor	r1, r1
 47e:	2f 93       	push	r18
 480:	3f 93       	push	r19
 482:	4f 93       	push	r20
 484:	5f 93       	push	r21
 486:	6f 93       	push	r22
 488:	7f 93       	push	r23
 48a:	8f 93       	push	r24
 48c:	9f 93       	push	r25
 48e:	af 93       	push	r26
 490:	bf 93       	push	r27
 492:	ef 93       	push	r30
 494:	ff 93       	push	r31
	
	if(EXTI_voidCallBacks[0] != 0){
 496:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <EXTI_voidCallBacks>
 49a:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <EXTI_voidCallBacks+0x1>
 49e:	30 97       	sbiw	r30, 0x00	; 0
 4a0:	09 f0       	breq	.+2      	; 0x4a4 <__vector_1+0x30>
		EXTI_voidCallBacks[0]();
 4a2:	09 95       	icall
	}
}
 4a4:	ff 91       	pop	r31
 4a6:	ef 91       	pop	r30
 4a8:	bf 91       	pop	r27
 4aa:	af 91       	pop	r26
 4ac:	9f 91       	pop	r25
 4ae:	8f 91       	pop	r24
 4b0:	7f 91       	pop	r23
 4b2:	6f 91       	pop	r22
 4b4:	5f 91       	pop	r21
 4b6:	4f 91       	pop	r20
 4b8:	3f 91       	pop	r19
 4ba:	2f 91       	pop	r18
 4bc:	0f 90       	pop	r0
 4be:	0f be       	out	0x3f, r0	; 63
 4c0:	0f 90       	pop	r0
 4c2:	1f 90       	pop	r1
 4c4:	18 95       	reti

000004c6 <__vector_2>:

void EXTI_VECTOR_ISR_EXTI1(void){
 4c6:	1f 92       	push	r1
 4c8:	0f 92       	push	r0
 4ca:	0f b6       	in	r0, 0x3f	; 63
 4cc:	0f 92       	push	r0
 4ce:	11 24       	eor	r1, r1
 4d0:	2f 93       	push	r18
 4d2:	3f 93       	push	r19
 4d4:	4f 93       	push	r20
 4d6:	5f 93       	push	r21
 4d8:	6f 93       	push	r22
 4da:	7f 93       	push	r23
 4dc:	8f 93       	push	r24
 4de:	9f 93       	push	r25
 4e0:	af 93       	push	r26
 4e2:	bf 93       	push	r27
 4e4:	ef 93       	push	r30
 4e6:	ff 93       	push	r31
	
	if(EXTI_voidCallBacks[1] != 0){
 4e8:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <EXTI_voidCallBacks+0x2>
 4ec:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <EXTI_voidCallBacks+0x3>
 4f0:	30 97       	sbiw	r30, 0x00	; 0
 4f2:	09 f0       	breq	.+2      	; 0x4f6 <__vector_2+0x30>
		EXTI_voidCallBacks[1]();
 4f4:	09 95       	icall
	}
}
 4f6:	ff 91       	pop	r31
 4f8:	ef 91       	pop	r30
 4fa:	bf 91       	pop	r27
 4fc:	af 91       	pop	r26
 4fe:	9f 91       	pop	r25
 500:	8f 91       	pop	r24
 502:	7f 91       	pop	r23
 504:	6f 91       	pop	r22
 506:	5f 91       	pop	r21
 508:	4f 91       	pop	r20
 50a:	3f 91       	pop	r19
 50c:	2f 91       	pop	r18
 50e:	0f 90       	pop	r0
 510:	0f be       	out	0x3f, r0	; 63
 512:	0f 90       	pop	r0
 514:	1f 90       	pop	r1
 516:	18 95       	reti

00000518 <__vector_3>:

void EXTI_VECTOR_ISR_EXTI2(void){
 518:	1f 92       	push	r1
 51a:	0f 92       	push	r0
 51c:	0f b6       	in	r0, 0x3f	; 63
 51e:	0f 92       	push	r0
 520:	11 24       	eor	r1, r1
 522:	2f 93       	push	r18
 524:	3f 93       	push	r19
 526:	4f 93       	push	r20
 528:	5f 93       	push	r21
 52a:	6f 93       	push	r22
 52c:	7f 93       	push	r23
 52e:	8f 93       	push	r24
 530:	9f 93       	push	r25
 532:	af 93       	push	r26
 534:	bf 93       	push	r27
 536:	ef 93       	push	r30
 538:	ff 93       	push	r31
	if(EXTI_voidCallBacks[2] != 0){
 53a:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <EXTI_voidCallBacks+0x4>
 53e:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <EXTI_voidCallBacks+0x5>
 542:	30 97       	sbiw	r30, 0x00	; 0
 544:	09 f0       	breq	.+2      	; 0x548 <__vector_3+0x30>
		EXTI_voidCallBacks[2]();
 546:	09 95       	icall
	}
 548:	ff 91       	pop	r31
 54a:	ef 91       	pop	r30
 54c:	bf 91       	pop	r27
 54e:	af 91       	pop	r26
 550:	9f 91       	pop	r25
 552:	8f 91       	pop	r24
 554:	7f 91       	pop	r23
 556:	6f 91       	pop	r22
 558:	5f 91       	pop	r21
 55a:	4f 91       	pop	r20
 55c:	3f 91       	pop	r19
 55e:	2f 91       	pop	r18
 560:	0f 90       	pop	r0
 562:	0f be       	out	0x3f, r0	; 63
 564:	0f 90       	pop	r0
 566:	1f 90       	pop	r1
 568:	18 95       	reti

0000056a <SPI_voidInit>:
{
	// enable interrupt
	SET_BIT(SPCR_REG , 7);
	// enable GIE
	SET_BIT(SREG_REG , 7);
	SPI_callBack = callback;
 56a:	0f 93       	push	r16
 56c:	1f 93       	push	r17
 56e:	81 30       	cpi	r24, 0x01	; 1
 570:	21 f4       	brne	.+8      	; 0x57a <SPI_voidInit+0x10>
 572:	97 b3       	in	r25, 0x17	; 23
 574:	90 6b       	ori	r25, 0xB0	; 176
 576:	97 bb       	out	0x17, r25	; 23
 578:	03 c0       	rjmp	.+6      	; 0x580 <SPI_voidInit+0x16>
 57a:	97 b3       	in	r25, 0x17	; 23
 57c:	90 64       	ori	r25, 0x40	; 64
 57e:	97 bb       	out	0x17, r25	; 23
 580:	02 fb       	bst	r16, 2
 582:	99 27       	eor	r25, r25
 584:	90 f9       	bld	r25, 0
 586:	9e b9       	out	0x0e, r25	; 14
 588:	90 2f       	mov	r25, r16
 58a:	9b 7f       	andi	r25, 0xFB	; 251
 58c:	20 e2       	ldi	r18, 0x20	; 32
 58e:	62 9f       	mul	r22, r18
 590:	80 01       	movw	r16, r0
 592:	11 24       	eor	r1, r1
 594:	50 e1       	ldi	r21, 0x10	; 16
 596:	85 9f       	mul	r24, r21
 598:	90 01       	movw	r18, r0
 59a:	11 24       	eor	r1, r1
 59c:	50 e0       	ldi	r21, 0x00	; 0
 59e:	44 0f       	add	r20, r20
 5a0:	55 1f       	adc	r21, r21
 5a2:	44 0f       	add	r20, r20
 5a4:	55 1f       	adc	r21, r21
 5a6:	44 0f       	add	r20, r20
 5a8:	55 1f       	adc	r21, r21
 5aa:	00 64       	ori	r16, 0x40	; 64
 5ac:	02 2b       	or	r16, r18
 5ae:	04 2b       	or	r16, r20
 5b0:	09 2b       	or	r16, r25
 5b2:	04 60       	ori	r16, 0x04	; 4
 5b4:	0d b9       	out	0x0d, r16	; 13
 5b6:	1f 91       	pop	r17
 5b8:	0f 91       	pop	r16
 5ba:	08 95       	ret

000005bc <SPI_voidMasterTransmit>:
 5bc:	8f b9       	out	0x0f, r24	; 15
 5be:	77 9b       	sbis	0x0e, 7	; 14
 5c0:	fe cf       	rjmp	.-4      	; 0x5be <SPI_voidMasterTransmit+0x2>
 5c2:	08 95       	ret

000005c4 <SPI_voidMasterTransmitString>:
 5c4:	0f 93       	push	r16
 5c6:	1f 93       	push	r17
 5c8:	cf 93       	push	r28
 5ca:	8c 01       	movw	r16, r24
 5cc:	c0 e0       	ldi	r28, 0x00	; 0
 5ce:	03 c0       	rjmp	.+6      	; 0x5d6 <SPI_voidMasterTransmitString+0x12>
 5d0:	0e 94 de 02 	call	0x5bc	; 0x5bc <SPI_voidMasterTransmit>
 5d4:	cf 5f       	subi	r28, 0xFF	; 255
 5d6:	f8 01       	movw	r30, r16
 5d8:	ec 0f       	add	r30, r28
 5da:	f1 1d       	adc	r31, r1
 5dc:	80 81       	ld	r24, Z
 5de:	81 11       	cpse	r24, r1
 5e0:	f7 cf       	rjmp	.-18     	; 0x5d0 <SPI_voidMasterTransmitString+0xc>
 5e2:	0e 94 de 02 	call	0x5bc	; 0x5bc <SPI_voidMasterTransmit>
 5e6:	cf 91       	pop	r28
 5e8:	1f 91       	pop	r17
 5ea:	0f 91       	pop	r16
 5ec:	08 95       	ret

000005ee <__vector_12>:
}

void SPI_ISR(void)
{
 5ee:	1f 92       	push	r1
 5f0:	0f 92       	push	r0
 5f2:	0f b6       	in	r0, 0x3f	; 63
 5f4:	0f 92       	push	r0
 5f6:	11 24       	eor	r1, r1
 5f8:	2f 93       	push	r18
 5fa:	3f 93       	push	r19
 5fc:	4f 93       	push	r20
 5fe:	5f 93       	push	r21
 600:	6f 93       	push	r22
 602:	7f 93       	push	r23
 604:	8f 93       	push	r24
 606:	9f 93       	push	r25
 608:	af 93       	push	r26
 60a:	bf 93       	push	r27
 60c:	ef 93       	push	r30
 60e:	ff 93       	push	r31
	if (SPI_callBack != 0)
 610:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <SPI_callBack>
 614:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <SPI_callBack+0x1>
 618:	30 97       	sbiw	r30, 0x00	; 0
 61a:	09 f0       	breq	.+2      	; 0x61e <__vector_12+0x30>
	{
			SPI_callBack();
 61c:	09 95       	icall
	}
}
 61e:	ff 91       	pop	r31
 620:	ef 91       	pop	r30
 622:	bf 91       	pop	r27
 624:	af 91       	pop	r26
 626:	9f 91       	pop	r25
 628:	8f 91       	pop	r24
 62a:	7f 91       	pop	r23
 62c:	6f 91       	pop	r22
 62e:	5f 91       	pop	r21
 630:	4f 91       	pop	r20
 632:	3f 91       	pop	r19
 634:	2f 91       	pop	r18
 636:	0f 90       	pop	r0
 638:	0f be       	out	0x3f, r0	; 63
 63a:	0f 90       	pop	r0
 63c:	1f 90       	pop	r1
 63e:	18 95       	reti

00000640 <__vector_11>:
	SoftwarePWM_dutyCycle = dutyCycle;
	OCR0_REG = 100;
	isSoftwarePWMMode = 1;
	TIMER0_voidEnableInterrupt(TIMER0_INTERRUPT_COMPARE);
}
void TIMER0_ISR_VECTOR_OVERFLOW(void){
 640:	1f 92       	push	r1
 642:	0f 92       	push	r0
 644:	0f b6       	in	r0, 0x3f	; 63
 646:	0f 92       	push	r0
 648:	11 24       	eor	r1, r1
 64a:	2f 93       	push	r18
 64c:	3f 93       	push	r19
 64e:	4f 93       	push	r20
 650:	5f 93       	push	r21
 652:	6f 93       	push	r22
 654:	7f 93       	push	r23
 656:	8f 93       	push	r24
 658:	9f 93       	push	r25
 65a:	af 93       	push	r26
 65c:	bf 93       	push	r27
 65e:	ef 93       	push	r30
 660:	ff 93       	push	r31
	if(TIMER0_callBacks[0] != 0){
 662:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <TIMER0_callBacks>
 666:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <TIMER0_callBacks+0x1>
 66a:	30 97       	sbiw	r30, 0x00	; 0
 66c:	09 f0       	breq	.+2      	; 0x670 <__vector_11+0x30>
		TIMER0_callBacks[0]();
 66e:	09 95       	icall
	}
	SET_BIT(TIFR_REG,0);
 670:	88 b7       	in	r24, 0x38	; 56
 672:	81 60       	ori	r24, 0x01	; 1
 674:	88 bf       	out	0x38, r24	; 56
	TCNT0_REG = storedPreload;
 676:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <storedPreload>
 67a:	82 bf       	out	0x32, r24	; 50
}
 67c:	ff 91       	pop	r31
 67e:	ef 91       	pop	r30
 680:	bf 91       	pop	r27
 682:	af 91       	pop	r26
 684:	9f 91       	pop	r25
 686:	8f 91       	pop	r24
 688:	7f 91       	pop	r23
 68a:	6f 91       	pop	r22
 68c:	5f 91       	pop	r21
 68e:	4f 91       	pop	r20
 690:	3f 91       	pop	r19
 692:	2f 91       	pop	r18
 694:	0f 90       	pop	r0
 696:	0f be       	out	0x3f, r0	; 63
 698:	0f 90       	pop	r0
 69a:	1f 90       	pop	r1
 69c:	18 95       	reti

0000069e <__vector_10>:

void TIMER0_ISR_VECTOR_COMPARE(void){
 69e:	1f 92       	push	r1
 6a0:	0f 92       	push	r0
 6a2:	0f b6       	in	r0, 0x3f	; 63
 6a4:	0f 92       	push	r0
 6a6:	11 24       	eor	r1, r1
 6a8:	2f 93       	push	r18
 6aa:	3f 93       	push	r19
 6ac:	4f 93       	push	r20
 6ae:	5f 93       	push	r21
 6b0:	6f 93       	push	r22
 6b2:	7f 93       	push	r23
 6b4:	8f 93       	push	r24
 6b6:	9f 93       	push	r25
 6b8:	af 93       	push	r26
 6ba:	bf 93       	push	r27
 6bc:	ef 93       	push	r30
 6be:	ff 93       	push	r31
	if (isSoftwarePWMMode)
 6c0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <isSoftwarePWMMode>
 6c4:	88 23       	and	r24, r24
 6c6:	f1 f0       	breq	.+60     	; 0x704 <__vector_10+0x66>
	{
		SoftwarePWM_counter++;
 6c8:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <SoftwarePWM_counter>
 6cc:	8f 5f       	subi	r24, 0xFF	; 255
 6ce:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <SoftwarePWM_counter>
		if (SoftwarePWM_counter >= SoftwarePWM_dutyCycle )
 6d2:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <SoftwarePWM_dutyCycle>
 6d6:	89 17       	cp	r24, r25
 6d8:	38 f0       	brcs	.+14     	; 0x6e8 <__vector_10+0x4a>
		{
			DIO_voidSetPinValue(SoftwarePWM_PIN , SoftwarePWM_PORT , LOW);
 6da:	40 e0       	ldi	r20, 0x00	; 0
 6dc:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <SoftwarePWM_PORT>
 6e0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <SoftwarePWM_PIN>
 6e4:	0e 94 b4 01 	call	0x368	; 0x368 <DIO_voidSetPinValue>
		}
		if (SoftwarePWM_counter >= 100)
 6e8:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <SoftwarePWM_counter>
 6ec:	84 36       	cpi	r24, 0x64	; 100
 6ee:	88 f0       	brcs	.+34     	; 0x712 <__vector_10+0x74>
		{
			DIO_voidSetPinValue(SoftwarePWM_PIN , SoftwarePWM_PORT , HIGH);
 6f0:	41 e0       	ldi	r20, 0x01	; 1
 6f2:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <SoftwarePWM_PORT>
 6f6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <SoftwarePWM_PIN>
 6fa:	0e 94 b4 01 	call	0x368	; 0x368 <DIO_voidSetPinValue>
			SoftwarePWM_counter = 0;
 6fe:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <SoftwarePWM_counter>
 702:	07 c0       	rjmp	.+14     	; 0x712 <__vector_10+0x74>
		}
	}
	else 
	{
		if(TIMER0_callBacks[1] != 0){
 704:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <TIMER0_callBacks+0x2>
 708:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <TIMER0_callBacks+0x3>
 70c:	30 97       	sbiw	r30, 0x00	; 0
 70e:	09 f0       	breq	.+2      	; 0x712 <__vector_10+0x74>
			TIMER0_callBacks[1]();
 710:	09 95       	icall
		}
	}
	SET_BIT(TIFR_REG,1);
 712:	88 b7       	in	r24, 0x38	; 56
 714:	82 60       	ori	r24, 0x02	; 2
 716:	88 bf       	out	0x38, r24	; 56
}
 718:	ff 91       	pop	r31
 71a:	ef 91       	pop	r30
 71c:	bf 91       	pop	r27
 71e:	af 91       	pop	r26
 720:	9f 91       	pop	r25
 722:	8f 91       	pop	r24
 724:	7f 91       	pop	r23
 726:	6f 91       	pop	r22
 728:	5f 91       	pop	r21
 72a:	4f 91       	pop	r20
 72c:	3f 91       	pop	r19
 72e:	2f 91       	pop	r18
 730:	0f 90       	pop	r0
 732:	0f be       	out	0x3f, r0	; 63
 734:	0f 90       	pop	r0
 736:	1f 90       	pop	r1
 738:	18 95       	reti

0000073a <__vector_7>:

void MTIM1_voidStartTickMeasure(void);
u32  MTIM1_u32GetElapsedTicks(void);
u16 MTIM1_u16GetDivision(void);

void TIMER1_ISR_VECTOR_COMPAREA(void){
 73a:	1f 92       	push	r1
 73c:	0f 92       	push	r0
 73e:	0f b6       	in	r0, 0x3f	; 63
 740:	0f 92       	push	r0
 742:	11 24       	eor	r1, r1
 744:	2f 93       	push	r18
 746:	3f 93       	push	r19
 748:	4f 93       	push	r20
 74a:	5f 93       	push	r21
 74c:	6f 93       	push	r22
 74e:	7f 93       	push	r23
 750:	8f 93       	push	r24
 752:	9f 93       	push	r25
 754:	af 93       	push	r26
 756:	bf 93       	push	r27
 758:	ef 93       	push	r30
 75a:	ff 93       	push	r31
	if(TIMER1_callBacks[2] != 0)
 75c:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <TIMER1_callBacks+0x4>
 760:	f0 91 7e 00 	lds	r31, 0x007E	; 0x80007e <TIMER1_callBacks+0x5>
 764:	30 97       	sbiw	r30, 0x00	; 0
 766:	09 f0       	breq	.+2      	; 0x76a <__vector_7+0x30>
	TIMER1_callBacks[2]();
 768:	09 95       	icall
}
 76a:	ff 91       	pop	r31
 76c:	ef 91       	pop	r30
 76e:	bf 91       	pop	r27
 770:	af 91       	pop	r26
 772:	9f 91       	pop	r25
 774:	8f 91       	pop	r24
 776:	7f 91       	pop	r23
 778:	6f 91       	pop	r22
 77a:	5f 91       	pop	r21
 77c:	4f 91       	pop	r20
 77e:	3f 91       	pop	r19
 780:	2f 91       	pop	r18
 782:	0f 90       	pop	r0
 784:	0f be       	out	0x3f, r0	; 63
 786:	0f 90       	pop	r0
 788:	1f 90       	pop	r1
 78a:	18 95       	reti

0000078c <__vector_8>:
void TIMER1_ISR_VECTOR_COMPAREB(void){
 78c:	1f 92       	push	r1
 78e:	0f 92       	push	r0
 790:	0f b6       	in	r0, 0x3f	; 63
 792:	0f 92       	push	r0
 794:	11 24       	eor	r1, r1
 796:	2f 93       	push	r18
 798:	3f 93       	push	r19
 79a:	4f 93       	push	r20
 79c:	5f 93       	push	r21
 79e:	6f 93       	push	r22
 7a0:	7f 93       	push	r23
 7a2:	8f 93       	push	r24
 7a4:	9f 93       	push	r25
 7a6:	af 93       	push	r26
 7a8:	bf 93       	push	r27
 7aa:	ef 93       	push	r30
 7ac:	ff 93       	push	r31
	if(TIMER1_callBacks[1] != 0)
 7ae:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <TIMER1_callBacks+0x2>
 7b2:	f0 91 7c 00 	lds	r31, 0x007C	; 0x80007c <TIMER1_callBacks+0x3>
 7b6:	30 97       	sbiw	r30, 0x00	; 0
 7b8:	09 f0       	breq	.+2      	; 0x7bc <__vector_8+0x30>
	TIMER1_callBacks[1]();
 7ba:	09 95       	icall
}
 7bc:	ff 91       	pop	r31
 7be:	ef 91       	pop	r30
 7c0:	bf 91       	pop	r27
 7c2:	af 91       	pop	r26
 7c4:	9f 91       	pop	r25
 7c6:	8f 91       	pop	r24
 7c8:	7f 91       	pop	r23
 7ca:	6f 91       	pop	r22
 7cc:	5f 91       	pop	r21
 7ce:	4f 91       	pop	r20
 7d0:	3f 91       	pop	r19
 7d2:	2f 91       	pop	r18
 7d4:	0f 90       	pop	r0
 7d6:	0f be       	out	0x3f, r0	; 63
 7d8:	0f 90       	pop	r0
 7da:	1f 90       	pop	r1
 7dc:	18 95       	reti

000007de <__vector_9>:
void TIMER1_ISR_VECTOR_OVERFLOW(void){
 7de:	1f 92       	push	r1
 7e0:	0f 92       	push	r0
 7e2:	0f b6       	in	r0, 0x3f	; 63
 7e4:	0f 92       	push	r0
 7e6:	11 24       	eor	r1, r1
 7e8:	2f 93       	push	r18
 7ea:	3f 93       	push	r19
 7ec:	4f 93       	push	r20
 7ee:	5f 93       	push	r21
 7f0:	6f 93       	push	r22
 7f2:	7f 93       	push	r23
 7f4:	8f 93       	push	r24
 7f6:	9f 93       	push	r25
 7f8:	af 93       	push	r26
 7fa:	bf 93       	push	r27
 7fc:	ef 93       	push	r30
 7fe:	ff 93       	push	r31
	overflowCounter++;
 800:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <overflowCounter>
 804:	8f 5f       	subi	r24, 0xFF	; 255
 806:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <overflowCounter>
	if(TIMER1_callBacks[0] != 0)
 80a:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <TIMER1_callBacks>
 80e:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <TIMER1_callBacks+0x1>
 812:	30 97       	sbiw	r30, 0x00	; 0
 814:	09 f0       	breq	.+2      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
		TIMER1_callBacks[0]();
 816:	09 95       	icall
	TCNT1_REG = TIMER1_storedPreload;
 818:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <TIMER1_storedPreload>
 81c:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <TIMER1_storedPreload+0x1>
 820:	9d bd       	out	0x2d, r25	; 45
 822:	8c bd       	out	0x2c, r24	; 44
}
 824:	ff 91       	pop	r31
 826:	ef 91       	pop	r30
 828:	bf 91       	pop	r27
 82a:	af 91       	pop	r26
 82c:	9f 91       	pop	r25
 82e:	8f 91       	pop	r24
 830:	7f 91       	pop	r23
 832:	6f 91       	pop	r22
 834:	5f 91       	pop	r21
 836:	4f 91       	pop	r20
 838:	3f 91       	pop	r19
 83a:	2f 91       	pop	r18
 83c:	0f 90       	pop	r0
 83e:	0f be       	out	0x3f, r0	; 63
 840:	0f 90       	pop	r0
 842:	1f 90       	pop	r1
 844:	18 95       	reti

00000846 <USART_voidInit>:
	while(string[i] != '\0')
	{
		USART_voidTransmitChar(string[i]);
		i++;
	}
}
 846:	df 92       	push	r13
 848:	ef 92       	push	r14
 84a:	ff 92       	push	r15
 84c:	0f 93       	push	r16
 84e:	1f 93       	push	r17
 850:	cf 93       	push	r28
 852:	df 93       	push	r29
 854:	d8 2e       	mov	r13, r24
 856:	16 2f       	mov	r17, r22
 858:	c4 2f       	mov	r28, r20
 85a:	d2 2f       	mov	r29, r18
 85c:	61 11       	cpse	r22, r1
 85e:	10 c0       	rjmp	.+32     	; 0x880 <__stack+0x21>
 860:	0e 94 d6 00 	call	0x1ac	; 0x1ac <CLOCK_u32GetSystemClock>
 864:	97 01       	movw	r18, r14
 866:	22 95       	swap	r18
 868:	32 95       	swap	r19
 86a:	30 7f       	andi	r19, 0xF0	; 240
 86c:	32 27       	eor	r19, r18
 86e:	20 7f       	andi	r18, 0xF0	; 240
 870:	32 27       	eor	r19, r18
 872:	40 e0       	ldi	r20, 0x00	; 0
 874:	50 e0       	ldi	r21, 0x00	; 0
 876:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__udivmodsi4>
 87a:	21 50       	subi	r18, 0x01	; 1
 87c:	31 09       	sbc	r19, r1
 87e:	0b c0       	rjmp	.+22     	; 0x896 <__stack+0x37>
 880:	0e 94 d6 00 	call	0x1ac	; 0x1ac <CLOCK_u32GetSystemClock>
 884:	97 01       	movw	r18, r14
 886:	22 0f       	add	r18, r18
 888:	33 1f       	adc	r19, r19
 88a:	40 e0       	ldi	r20, 0x00	; 0
 88c:	50 e0       	ldi	r21, 0x00	; 0
 88e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__udivmodsi4>
 892:	21 50       	subi	r18, 0x01	; 1
 894:	31 09       	sbc	r19, r1
 896:	80 b5       	in	r24, 0x20	; 32
 898:	8f 77       	andi	r24, 0x7F	; 127
 89a:	80 bd       	out	0x20, r24	; 32
 89c:	30 bd       	out	0x20, r19	; 32
 89e:	29 b9       	out	0x09, r18	; 9
 8a0:	dd 0c       	add	r13, r13
 8a2:	dd 0c       	add	r13, r13
 8a4:	dd 0c       	add	r13, r13
 8a6:	da b8       	out	0x0a, r13	; 10
 8a8:	80 b5       	in	r24, 0x20	; 32
 8aa:	80 68       	ori	r24, 0x80	; 128
 8ac:	80 bd       	out	0x20, r24	; 32
 8ae:	80 e4       	ldi	r24, 0x40	; 64
 8b0:	18 9f       	mul	r17, r24
 8b2:	b0 01       	movw	r22, r0
 8b4:	11 24       	eor	r1, r1
 8b6:	80 e1       	ldi	r24, 0x10	; 16
 8b8:	d8 9f       	mul	r29, r24
 8ba:	90 01       	movw	r18, r0
 8bc:	11 24       	eor	r1, r1
 8be:	10 e0       	ldi	r17, 0x00	; 0
 8c0:	00 0f       	add	r16, r16
 8c2:	11 1f       	adc	r17, r17
 8c4:	00 0f       	add	r16, r16
 8c6:	11 1f       	adc	r17, r17
 8c8:	00 0f       	add	r16, r16
 8ca:	11 1f       	adc	r17, r17
 8cc:	4c 2f       	mov	r20, r28
 8ce:	50 e0       	ldi	r21, 0x00	; 0
 8d0:	44 0f       	add	r20, r20
 8d2:	55 1f       	adc	r21, r21
 8d4:	60 68       	ori	r22, 0x80	; 128
 8d6:	62 2b       	or	r22, r18
 8d8:	06 2b       	or	r16, r22
 8da:	40 2b       	or	r20, r16
 8dc:	40 bd       	out	0x20, r20	; 32
 8de:	df 91       	pop	r29
 8e0:	cf 91       	pop	r28
 8e2:	1f 91       	pop	r17
 8e4:	0f 91       	pop	r16
 8e6:	ff 90       	pop	r15
 8e8:	ef 90       	pop	r14
 8ea:	df 90       	pop	r13
 8ec:	08 95       	ret

000008ee <USART_u8RecieveData>:
 8ee:	5f 9b       	sbis	0x0b, 7	; 11
 8f0:	fe cf       	rjmp	.-4      	; 0x8ee <USART_u8RecieveData>
 8f2:	8c b1       	in	r24, 0x0c	; 12
 8f4:	08 95       	ret

000008f6 <__vector_13>:

void USART_ISR_RECIEVE_COMPLETE(void)
{
 8f6:	1f 92       	push	r1
 8f8:	0f 92       	push	r0
 8fa:	0f b6       	in	r0, 0x3f	; 63
 8fc:	0f 92       	push	r0
 8fe:	11 24       	eor	r1, r1
 900:	2f 93       	push	r18
 902:	3f 93       	push	r19
 904:	4f 93       	push	r20
 906:	5f 93       	push	r21
 908:	6f 93       	push	r22
 90a:	7f 93       	push	r23
 90c:	8f 93       	push	r24
 90e:	9f 93       	push	r25
 910:	af 93       	push	r26
 912:	bf 93       	push	r27
 914:	ef 93       	push	r30
 916:	ff 93       	push	r31
	if (*USART_recieveCallBack != 0)
 918:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <USART_recieveCallBack>
 91c:	f0 91 80 00 	lds	r31, 0x0080	; 0x800080 <USART_recieveCallBack+0x1>
 920:	30 97       	sbiw	r30, 0x00	; 0
 922:	11 f0       	breq	.+4      	; 0x928 <__vector_13+0x32>
	{
		USART_recieveCallBack(UDR_REG);
 924:	8c b1       	in	r24, 0x0c	; 12
 926:	09 95       	icall
	}
}
 928:	ff 91       	pop	r31
 92a:	ef 91       	pop	r30
 92c:	bf 91       	pop	r27
 92e:	af 91       	pop	r26
 930:	9f 91       	pop	r25
 932:	8f 91       	pop	r24
 934:	7f 91       	pop	r23
 936:	6f 91       	pop	r22
 938:	5f 91       	pop	r21
 93a:	4f 91       	pop	r20
 93c:	3f 91       	pop	r19
 93e:	2f 91       	pop	r18
 940:	0f 90       	pop	r0
 942:	0f be       	out	0x3f, r0	; 63
 944:	0f 90       	pop	r0
 946:	1f 90       	pop	r1
 948:	18 95       	reti

0000094a <__vector_15>:

void USART_ISR_TRANSMIT_COMPLETE(void)
{
 94a:	1f 92       	push	r1
 94c:	0f 92       	push	r0
 94e:	0f b6       	in	r0, 0x3f	; 63
 950:	0f 92       	push	r0
 952:	11 24       	eor	r1, r1
 954:	2f 93       	push	r18
 956:	3f 93       	push	r19
 958:	4f 93       	push	r20
 95a:	5f 93       	push	r21
 95c:	6f 93       	push	r22
 95e:	7f 93       	push	r23
 960:	8f 93       	push	r24
 962:	9f 93       	push	r25
 964:	af 93       	push	r26
 966:	bf 93       	push	r27
 968:	ef 93       	push	r30
 96a:	ff 93       	push	r31
	if (USART_callBacks[1] != 0)
 96c:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <USART_callBacks+0x2>
 970:	f0 91 84 00 	lds	r31, 0x0084	; 0x800084 <USART_callBacks+0x3>
 974:	30 97       	sbiw	r30, 0x00	; 0
 976:	09 f0       	breq	.+2      	; 0x97a <__vector_15+0x30>
	{
		USART_callBacks[1]();
 978:	09 95       	icall
	}
}
 97a:	ff 91       	pop	r31
 97c:	ef 91       	pop	r30
 97e:	bf 91       	pop	r27
 980:	af 91       	pop	r26
 982:	9f 91       	pop	r25
 984:	8f 91       	pop	r24
 986:	7f 91       	pop	r23
 988:	6f 91       	pop	r22
 98a:	5f 91       	pop	r21
 98c:	4f 91       	pop	r20
 98e:	3f 91       	pop	r19
 990:	2f 91       	pop	r18
 992:	0f 90       	pop	r0
 994:	0f be       	out	0x3f, r0	; 63
 996:	0f 90       	pop	r0
 998:	1f 90       	pop	r1
 99a:	18 95       	reti

0000099c <__vector_14>:
void USART_ISR_REGISTER_EMPTY(void)
{
 99c:	1f 92       	push	r1
 99e:	0f 92       	push	r0
 9a0:	0f b6       	in	r0, 0x3f	; 63
 9a2:	0f 92       	push	r0
 9a4:	11 24       	eor	r1, r1
 9a6:	2f 93       	push	r18
 9a8:	3f 93       	push	r19
 9aa:	4f 93       	push	r20
 9ac:	5f 93       	push	r21
 9ae:	6f 93       	push	r22
 9b0:	7f 93       	push	r23
 9b2:	8f 93       	push	r24
 9b4:	9f 93       	push	r25
 9b6:	af 93       	push	r26
 9b8:	bf 93       	push	r27
 9ba:	ef 93       	push	r30
 9bc:	ff 93       	push	r31
	if (USART_callBacks[0] != 0)
 9be:	e0 91 81 00 	lds	r30, 0x0081	; 0x800081 <USART_callBacks>
 9c2:	f0 91 82 00 	lds	r31, 0x0082	; 0x800082 <USART_callBacks+0x1>
 9c6:	30 97       	sbiw	r30, 0x00	; 0
 9c8:	09 f0       	breq	.+2      	; 0x9cc <__vector_14+0x30>
	{
		USART_callBacks[0]();
 9ca:	09 95       	icall
	}
}
 9cc:	ff 91       	pop	r31
 9ce:	ef 91       	pop	r30
 9d0:	bf 91       	pop	r27
 9d2:	af 91       	pop	r26
 9d4:	9f 91       	pop	r25
 9d6:	8f 91       	pop	r24
 9d8:	7f 91       	pop	r23
 9da:	6f 91       	pop	r22
 9dc:	5f 91       	pop	r21
 9de:	4f 91       	pop	r20
 9e0:	3f 91       	pop	r19
 9e2:	2f 91       	pop	r18
 9e4:	0f 90       	pop	r0
 9e6:	0f be       	out	0x3f, r0	; 63
 9e8:	0f 90       	pop	r0
 9ea:	1f 90       	pop	r1
 9ec:	18 95       	reti

000009ee <__udivmodsi4>:
 9ee:	a1 e2       	ldi	r26, 0x21	; 33
 9f0:	1a 2e       	mov	r1, r26
 9f2:	aa 1b       	sub	r26, r26
 9f4:	bb 1b       	sub	r27, r27
 9f6:	fd 01       	movw	r30, r26
 9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__udivmodsi4_ep>

000009fa <__udivmodsi4_loop>:
 9fa:	aa 1f       	adc	r26, r26
 9fc:	bb 1f       	adc	r27, r27
 9fe:	ee 1f       	adc	r30, r30
 a00:	ff 1f       	adc	r31, r31
 a02:	a2 17       	cp	r26, r18
 a04:	b3 07       	cpc	r27, r19
 a06:	e4 07       	cpc	r30, r20
 a08:	f5 07       	cpc	r31, r21
 a0a:	20 f0       	brcs	.+8      	; 0xa14 <__udivmodsi4_ep>
 a0c:	a2 1b       	sub	r26, r18
 a0e:	b3 0b       	sbc	r27, r19
 a10:	e4 0b       	sbc	r30, r20
 a12:	f5 0b       	sbc	r31, r21

00000a14 <__udivmodsi4_ep>:
 a14:	66 1f       	adc	r22, r22
 a16:	77 1f       	adc	r23, r23
 a18:	88 1f       	adc	r24, r24
 a1a:	99 1f       	adc	r25, r25
 a1c:	1a 94       	dec	r1
 a1e:	69 f7       	brne	.-38     	; 0x9fa <__udivmodsi4_loop>
 a20:	60 95       	com	r22
 a22:	70 95       	com	r23
 a24:	80 95       	com	r24
 a26:	90 95       	com	r25
 a28:	9b 01       	movw	r18, r22
 a2a:	ac 01       	movw	r20, r24
 a2c:	bd 01       	movw	r22, r26
 a2e:	cf 01       	movw	r24, r30
 a30:	08 95       	ret

00000a32 <_exit>:
 a32:	f8 94       	cli

00000a34 <__stop_program>:
 a34:	ff cf       	rjmp	.-2      	; 0xa34 <__stop_program>
